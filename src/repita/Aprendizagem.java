package repita;

import componentes.SendKeys;
import java.awt.AWTException;
import java.awt.Image;
import java.awt.Point;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;
import org.jnativehook.NativeInputEvent;
import org.jnativehook.dispatcher.SwingDispatchService;
import org.jnativehook.keyboard.NativeKeyEvent;
import org.jnativehook.keyboard.NativeKeyListener;
import org.jnativehook.mouse.NativeMouseEvent;
import org.jnativehook.mouse.NativeMouseInputListener;

/**
 *
 * @author Hugo Carvalho
 */
public class Aprendizagem extends javax.swing.JFrame implements NativeKeyListener, NativeMouseInputListener {

    /**
     * Creates new form Aprendizagem
     *
     * @param parent
     */
    public Aprendizagem(JFrame parent) {

        this.parent = parent;
        this.point = new Point();
        this.script = "";
        this.list = new DefaultListModel();

        initComponents();
        
        this.jPanelParaSendKeys.setVisible(false);
        this.setSize(348, 170);

        URL url = this.getClass().getResource("..//assets//logo-mini.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        setIconImage(imagemTitulo);

        this.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                point.x = e.getX();
                point.y = e.getY();
            }
        });
        this.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                Point p = Aprendizagem.this.getLocation();
                Aprendizagem.this.setLocation(p.x + e.getX() - point.x, p.y + e.getY() - point.y);
            }
        });

        // Get the logger for "org.jnativehook" and set the level to warning.
        Logger logger = Logger.getLogger(GlobalScreen.class.getPackage().getName());
        logger.setLevel(Level.OFF);

        GlobalScreen.setEventDispatcher(new SwingDispatchService());

        GlobalScreen.addNativeKeyListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        jButtonResumePause = new javax.swing.JButton();
        jComboBoxAcoes = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPaneAcoes = new javax.swing.JScrollPane();
        jListAcoes = new javax.swing.JList();
        jButtonConcluir = new javax.swing.JButton();
        jButtonFechar = new javax.swing.JButton();
        jPanelParaSendKeys = new javax.swing.JPanel();
        jScrollPaneSendKeys = new javax.swing.JScrollPane();
        jEditorPaneSendKeys = new javax.swing.JEditorPane();
        jButtonSendKeys = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Repita RPA - Aprendizagem");
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(332, 284));
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel.setBackground(new java.awt.Color(245, 245, 245));
        jPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 2));

        jButtonResumePause.setBackground(new java.awt.Color(245, 245, 245));
        jButtonResumePause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/executar.png"))); // NOI18N
        jButtonResumePause.setText("Resume");
        jButtonResumePause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResumePauseActionPerformed(evt);
            }
        });

        jComboBoxAcoes.setBackground(new java.awt.Color(245, 245, 245));
        jComboBoxAcoes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione uma ação...", "Send keys", "Set timeout", "Set timeout image", "Get text (regex) " }));
        jComboBoxAcoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAcoesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBoxAcoes, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jButtonResumePause)
                .addContainerGap())
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxAcoes, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonResumePause, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(40, 41, 35));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 2));

        jScrollPaneAcoes.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lista de ações", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(255, 255, 255))); // NOI18N

        jListAcoes.setBackground(new java.awt.Color(40, 41, 35));
        jListAcoes.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        jListAcoes.setForeground(new java.awt.Color(255, 255, 255));
        jListAcoes.setModel(list);
        jScrollPaneAcoes.setViewportView(jListAcoes);

        jButtonConcluir.setBackground(new java.awt.Color(245, 245, 245));
        jButtonConcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/concluir.png"))); // NOI18N
        jButtonConcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConcluirActionPerformed(evt);
            }
        });

        jButtonFechar.setBackground(new java.awt.Color(245, 245, 245));
        jButtonFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/fechar.png"))); // NOI18N
        jButtonFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFecharActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneAcoes, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonConcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPaneAcoes, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jButtonConcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanelParaSendKeys.setBackground(new java.awt.Color(40, 41, 35));
        jPanelParaSendKeys.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 2));

        jScrollPaneSendKeys.setViewportView(jEditorPaneSendKeys);

        jButtonSendKeys.setBackground(new java.awt.Color(245, 245, 245));
        jButtonSendKeys.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/enviar.png"))); // NOI18N
        jButtonSendKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendKeysActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelParaSendKeysLayout = new javax.swing.GroupLayout(jPanelParaSendKeys);
        jPanelParaSendKeys.setLayout(jPanelParaSendKeysLayout);
        jPanelParaSendKeysLayout.setHorizontalGroup(
            jPanelParaSendKeysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelParaSendKeysLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneSendKeys)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSendKeys, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelParaSendKeysLayout.setVerticalGroup(
            jPanelParaSendKeysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelParaSendKeysLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPaneSendKeys, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelParaSendKeysLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSendKeys)
                .addGap(44, 44, 44))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelParaSendKeys, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanelParaSendKeys, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try {
            //Clean up the native hook.
            GlobalScreen.unregisterNativeHook();
        } catch (NativeHookException ex) {
            Logger.getLogger(Aprendizagem.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosed

    private void jButtonConcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConcluirActionPerformed
        try {
            //Clean up the native hook.
            GlobalScreen.unregisterNativeHook();
        } catch (NativeHookException ex) {
            Logger.getLogger(Aprendizagem.class.getName()).log(Level.SEVERE, null, ex);
        }

        editor.getjTextAreaScript().setText(editor.getjTextAreaScript().getText() + this.script);
        this.script = "";
        this.list.removeAllElements();
        this.jEditorPaneSendKeys.setText("");
        parent.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButtonConcluirActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        try {
            //Clean up the native hook.
            GlobalScreen.unregisterNativeHook();
        } catch (NativeHookException ex) {
            Logger.getLogger(Aprendizagem.class.getName()).log(Level.SEVERE, null, ex);
        }

        jButtonResumePause.setEnabled(true);
    }//GEN-LAST:event_formWindowGainedFocus

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        if (this.isVisible()) {
            try {
                GlobalScreen.registerNativeHook();
            } catch (NativeHookException ex) {
                System.err.println("There was a problem registering the native hook.");
                System.err.println(ex.getMessage());
                ex.printStackTrace();

                System.exit(1);
            }
        }

        jButtonResumePause.setEnabled(false);
    }//GEN-LAST:event_formWindowLostFocus

    private void jButtonResumePauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResumePauseActionPerformed
        if (!GlobalScreen.isNativeHookRegistered()) {
            Robot robot;
            try {
                robot = new Robot();

                robot.keyPress(KeyEvent.VK_ALT);
                robot.keyPress(KeyEvent.VK_TAB);
                robot.delay(10);
                robot.keyRelease(KeyEvent.VK_ALT);
                robot.keyRelease(KeyEvent.VK_TAB);
            } catch (AWTException ex) {
                Logger.getLogger(Aprendizagem.class.getName()).log(Level.SEVERE, null, ex);
            }
            jButtonResumePause.setEnabled(false);
        }
    }//GEN-LAST:event_jButtonResumePauseActionPerformed

    private void jComboBoxAcoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAcoesActionPerformed
        switch(jComboBoxAcoes.getSelectedIndex()){
            case 0:
                this.jPanelParaSendKeys.setVisible(false);
                this.setSize(348, 170);
                break;
            case 1:
                this.setSize(348, 290);
                this.jPanelParaSendKeys.setVisible(true);
                break;
        }
    }//GEN-LAST:event_jComboBoxAcoesActionPerformed

    private void jButtonFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFecharActionPerformed
        try {
            //Clean up the native hook.
            GlobalScreen.unregisterNativeHook();
        } catch (NativeHookException ex) {
            Logger.getLogger(Aprendizagem.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        this.script = "";
        this.list.removeAllElements();
        this.jEditorPaneSendKeys.setText("");
        parent.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButtonFecharActionPerformed

    private void jButtonSendKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendKeysActionPerformed
        script += "// classe para envio de input keys\n"
        + "new SendKeys(robot, \"" + jEditorPaneSendKeys.getText() + "\");\n";

        try {
            //Clean up the native hook.
            GlobalScreen.unregisterNativeHook();
        } catch (NativeHookException ex) {
            Logger.getLogger(Aprendizagem.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Robot robot = new Robot();

            robot.keyPress(KeyEvent.VK_ALT);
            robot.keyPress(KeyEvent.VK_TAB);
            robot.delay(10);
            robot.keyRelease(KeyEvent.VK_ALT);
            robot.keyRelease(KeyEvent.VK_TAB);

            robot.delay(1000);

            new SendKeys(robot, jEditorPaneSendKeys.getText());
        } catch (AWTException ex) {
            Logger.getLogger(Aprendizagem.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            //Clean up the native hook.
            GlobalScreen.registerNativeHook();
        } catch (NativeHookException ex) {
            Logger.getLogger(Aprendizagem.class.getName()).log(Level.SEVERE, null, ex);
        }

        list.addElement("Send keys - " + jEditorPaneSendKeys.getText());
        int index = jListAcoes.getSelectedIndex();
        jListAcoes.setSelectedIndex(index + 1);
        jListAcoes.ensureIndexIsVisible(index + 1);

        this.jEditorPaneSendKeys.setText("");
    }//GEN-LAST:event_jButtonSendKeysActionPerformed

    private static Point point;
    private JFrame parent;
    private Editor editor;
    private String script;
    private DefaultListModel list;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConcluir;
    private javax.swing.JButton jButtonFechar;
    private javax.swing.JButton jButtonResumePause;
    private javax.swing.JButton jButtonSendKeys;
    private javax.swing.JComboBox jComboBoxAcoes;
    private javax.swing.JEditorPane jEditorPaneSendKeys;
    private javax.swing.JList jListAcoes;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelParaSendKeys;
    private javax.swing.JScrollPane jScrollPaneAcoes;
    private javax.swing.JScrollPane jScrollPaneSendKeys;
    // End of variables declaration//GEN-END:variables

    public void setEditor(Editor editor) {
        this.editor = editor;
    }

    public String getScript() {
        return this.script;
    }

    @Override
    public void nativeKeyTyped(NativeKeyEvent nke) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void nativeKeyPressed(NativeKeyEvent nke) {
        if (createAwtKeyEvent(nke).getKeyCode() != KeyEvent.VK_UNDEFINED) {
            script += "robot.keyPress(" + createAwtKeyEvent(nke).getKeyCode() + ");\n"
                    + "robot.delay(10);\n";
        }

        list.addElement("Press key - " + createAwtKeyEvent(nke).getKeyCode());
        int index = jListAcoes.getSelectedIndex();
        jListAcoes.setSelectedIndex(index + 1); 
        jListAcoes.ensureIndexIsVisible(index + 1);
    }

    @Override
    public void nativeKeyReleased(NativeKeyEvent nke) {
        if (createAwtKeyEvent(nke).getKeyCode() != KeyEvent.VK_UNDEFINED) {
            script += "robot.keyRelease(" + createAwtKeyEvent(nke).getKeyCode() + ");\n";
        }

        list.addElement("Release key - " + createAwtKeyEvent(nke).getKeyCode());
        int index = jListAcoes.getSelectedIndex();
        jListAcoes.setSelectedIndex(index + 1); 
        jListAcoes.ensureIndexIsVisible(index + 1);
    }

    private KeyEvent createAwtKeyEvent(NativeKeyEvent e) {
        int keyCode = KeyEvent.VK_UNDEFINED;

        switch (e.getKeyCode()) {
            case NativeKeyEvent.VC_ESCAPE:
                keyCode = KeyEvent.VK_ESCAPE;
                break;

            // Begin Function Keys
            case NativeKeyEvent.VC_F1:
                keyCode = KeyEvent.VK_F1;
                break;

            case NativeKeyEvent.VC_F2:
                keyCode = KeyEvent.VK_F2;
                break;

            case NativeKeyEvent.VC_F3:
                keyCode = KeyEvent.VK_F3;
                break;

            case NativeKeyEvent.VC_F4:
                keyCode = KeyEvent.VK_F4;
                break;

            case NativeKeyEvent.VC_F5:
                keyCode = KeyEvent.VK_F5;
                break;

            case NativeKeyEvent.VC_F6:
                keyCode = KeyEvent.VK_F6;
                break;

            case NativeKeyEvent.VC_F7:
                keyCode = KeyEvent.VK_F7;
                break;

            case NativeKeyEvent.VC_F8:
                keyCode = KeyEvent.VK_F8;
                break;

            case NativeKeyEvent.VC_F9:
                keyCode = KeyEvent.VK_F9;
                break;

            case NativeKeyEvent.VC_F10:
                keyCode = KeyEvent.VK_F10;
                break;

            case NativeKeyEvent.VC_F11:
                keyCode = KeyEvent.VK_F11;
                break;

            case NativeKeyEvent.VC_F12:
                keyCode = KeyEvent.VK_F12;
                break;

            case NativeKeyEvent.VC_F13:
                keyCode = KeyEvent.VK_F13;
                break;

            case NativeKeyEvent.VC_F14:
                keyCode = KeyEvent.VK_F14;
                break;

            case NativeKeyEvent.VC_F15:
                keyCode = KeyEvent.VK_F15;
                break;

            case NativeKeyEvent.VC_F16:
                keyCode = KeyEvent.VK_F16;
                break;

            case NativeKeyEvent.VC_F17:
                keyCode = KeyEvent.VK_F17;
                break;

            case NativeKeyEvent.VC_F18:
                keyCode = KeyEvent.VK_F18;
                break;

            case NativeKeyEvent.VC_F19:
                keyCode = KeyEvent.VK_F19;
                break;

            case NativeKeyEvent.VC_F20:
                keyCode = KeyEvent.VK_F20;
                break;

            case NativeKeyEvent.VC_F21:
                keyCode = KeyEvent.VK_F21;
                break;

            case NativeKeyEvent.VC_F22:
                keyCode = KeyEvent.VK_F22;
                break;

            case NativeKeyEvent.VC_F23:
                keyCode = KeyEvent.VK_F23;
                break;

            case NativeKeyEvent.VC_F24:
                keyCode = KeyEvent.VK_F24;
                break;
            // End Function Keys

            // Begin Alphanumeric Zone
            case NativeKeyEvent.VC_BACKQUOTE:
                keyCode = KeyEvent.VK_BACK_QUOTE;
                break;

            case NativeKeyEvent.VC_1:
                keyCode = KeyEvent.VK_1;
                break;
            case NativeKeyEvent.VC_2:
                keyCode = KeyEvent.VK_2;
                break;
            case NativeKeyEvent.VC_3:
                keyCode = KeyEvent.VK_3;
                break;
            case NativeKeyEvent.VC_4:
                keyCode = KeyEvent.VK_4;
                break;
            case NativeKeyEvent.VC_5:
                keyCode = KeyEvent.VK_5;
                break;
            case NativeKeyEvent.VC_6:
                keyCode = KeyEvent.VK_6;
                break;
            case NativeKeyEvent.VC_7:
                keyCode = KeyEvent.VK_7;
                break;
            case NativeKeyEvent.VC_8:
                keyCode = KeyEvent.VK_8;
                break;
            case NativeKeyEvent.VC_9:
                keyCode = KeyEvent.VK_9;
                break;
            case NativeKeyEvent.VC_0:
                keyCode = KeyEvent.VK_0;
                break;

            case NativeKeyEvent.VC_MINUS:
                keyCode = KeyEvent.VK_MINUS;
                break;
            case NativeKeyEvent.VC_EQUALS:
                keyCode = KeyEvent.VK_EQUALS;
                break;
            case NativeKeyEvent.VC_BACKSPACE:
                keyCode = KeyEvent.VK_BACK_SPACE;
                break;

            case NativeKeyEvent.VC_TAB:
                keyCode = KeyEvent.VK_TAB;
                break;
            case NativeKeyEvent.VC_CAPS_LOCK:
                keyCode = KeyEvent.VK_CAPS_LOCK;
                break;

            case NativeKeyEvent.VC_A:
                keyCode = KeyEvent.VK_A;
                break;
            case NativeKeyEvent.VC_B:
                keyCode = KeyEvent.VK_B;
                break;
            case NativeKeyEvent.VC_C:
                keyCode = KeyEvent.VK_C;
                break;
            case NativeKeyEvent.VC_D:
                keyCode = KeyEvent.VK_D;
                break;
            case NativeKeyEvent.VC_E:
                keyCode = KeyEvent.VK_E;
                break;
            case NativeKeyEvent.VC_F:
                keyCode = KeyEvent.VK_F;
                break;
            case NativeKeyEvent.VC_G:
                keyCode = KeyEvent.VK_G;
                break;
            case NativeKeyEvent.VC_H:
                keyCode = KeyEvent.VK_H;
                break;
            case NativeKeyEvent.VC_I:
                keyCode = KeyEvent.VK_I;
                break;
            case NativeKeyEvent.VC_J:
                keyCode = KeyEvent.VK_J;
                break;
            case NativeKeyEvent.VC_K:
                keyCode = KeyEvent.VK_K;
                break;
            case NativeKeyEvent.VC_L:
                keyCode = KeyEvent.VK_L;
                break;
            case NativeKeyEvent.VC_M:
                keyCode = KeyEvent.VK_M;
                break;
            case NativeKeyEvent.VC_N:
                keyCode = KeyEvent.VK_N;
                break;
            case NativeKeyEvent.VC_O:
                keyCode = KeyEvent.VK_O;
                break;
            case NativeKeyEvent.VC_P:
                keyCode = KeyEvent.VK_P;
                break;
            case NativeKeyEvent.VC_Q:
                keyCode = KeyEvent.VK_Q;
                break;
            case NativeKeyEvent.VC_R:
                keyCode = KeyEvent.VK_R;
                break;
            case NativeKeyEvent.VC_S:
                keyCode = KeyEvent.VK_S;
                break;
            case NativeKeyEvent.VC_T:
                keyCode = KeyEvent.VK_T;
                break;
            case NativeKeyEvent.VC_U:
                keyCode = KeyEvent.VK_U;
                break;
            case NativeKeyEvent.VC_V:
                keyCode = KeyEvent.VK_V;
                break;
            case NativeKeyEvent.VC_W:
                keyCode = KeyEvent.VK_W;
                break;
            case NativeKeyEvent.VC_X:
                keyCode = KeyEvent.VK_X;
                break;
            case NativeKeyEvent.VC_Y:
                keyCode = KeyEvent.VK_Y;
                break;
            case NativeKeyEvent.VC_Z:
                keyCode = KeyEvent.VK_Z;
                break;

            case NativeKeyEvent.VC_OPEN_BRACKET:
                keyCode = KeyEvent.VK_OPEN_BRACKET;
                break;
            case NativeKeyEvent.VC_CLOSE_BRACKET:
                keyCode = KeyEvent.VK_CLOSE_BRACKET;
                break;
            case NativeKeyEvent.VC_BACK_SLASH:
                keyCode = KeyEvent.VK_BACK_SLASH;
                break;

            case NativeKeyEvent.VC_SEMICOLON:
                keyCode = KeyEvent.VK_SEMICOLON;
                break;
            case NativeKeyEvent.VC_QUOTE:
                keyCode = KeyEvent.VK_QUOTE;
                break;
            case NativeKeyEvent.VC_ENTER:
                keyCode = KeyEvent.VK_ENTER;
                break;

            case NativeKeyEvent.VC_COMMA:
                keyCode = KeyEvent.VK_COMMA;
                break;
            case NativeKeyEvent.VC_PERIOD:
                keyCode = KeyEvent.VK_PERIOD;
                break;
            case NativeKeyEvent.VC_SLASH:
                keyCode = KeyEvent.VK_SLASH;
                break;

            case NativeKeyEvent.VC_SPACE:
                keyCode = KeyEvent.VK_SPACE;
                break;
            // End Alphanumeric Zone

            case NativeKeyEvent.VC_PRINTSCREEN:
                keyCode = KeyEvent.VK_PRINTSCREEN;
                break;
            case NativeKeyEvent.VC_SCROLL_LOCK:
                keyCode = KeyEvent.VK_SCROLL_LOCK;
                break;
            case NativeKeyEvent.VC_PAUSE:
                keyCode = KeyEvent.VK_PAUSE;
                break;

            // Begin Edit Key Zone
            case NativeKeyEvent.VC_INSERT:
                keyCode = KeyEvent.VK_INSERT;
                break;
            case NativeKeyEvent.VC_DELETE:
                keyCode = KeyEvent.VK_DELETE;
                break;
            case NativeKeyEvent.VC_HOME:
                keyCode = KeyEvent.VK_HOME;
                break;
            case NativeKeyEvent.VC_END:
                keyCode = KeyEvent.VK_END;
                break;
            case NativeKeyEvent.VC_PAGE_UP:
                keyCode = KeyEvent.VK_PAGE_UP;
                break;
            case NativeKeyEvent.VC_PAGE_DOWN:
                keyCode = KeyEvent.VK_PAGE_DOWN;
                break;
            // End Edit Key Zone

            // Begin Cursor Key Zone
            case NativeKeyEvent.VC_UP:
                keyCode = KeyEvent.VK_UP;
                break;
            case NativeKeyEvent.VC_LEFT:
                keyCode = KeyEvent.VK_LEFT;
                break;
            case NativeKeyEvent.VC_CLEAR:
                keyCode = KeyEvent.VK_CLEAR;
                break;
            case NativeKeyEvent.VC_RIGHT:
                keyCode = KeyEvent.VK_RIGHT;
                break;
            case NativeKeyEvent.VC_DOWN:
                keyCode = KeyEvent.VK_DOWN;
                break;
            // End Cursor Key Zone

            // Begin Numeric Zone
            case NativeKeyEvent.VC_NUM_LOCK:
                keyCode = KeyEvent.VK_NUM_LOCK;
                break;
            case NativeKeyEvent.VC_SEPARATOR:
                keyCode = KeyEvent.VK_SEPARATOR;
                break;
            // End Numeric Zone

            // Begin Modifier and Control Keys
            case NativeKeyEvent.VC_SHIFT:
                keyCode = KeyEvent.VK_SHIFT;
                break;
            case NativeKeyEvent.VC_CONTROL:
                keyCode = KeyEvent.VK_CONTROL;
                break;
            case NativeKeyEvent.VC_ALT:
                keyCode = KeyEvent.VK_ALT;
                break;
            case NativeKeyEvent.VC_META:
                keyCode = KeyEvent.VK_META;
                break;
            case NativeKeyEvent.VC_CONTEXT_MENU:
                keyCode = KeyEvent.VK_CONTEXT_MENU;
                break;
            // End Modifier and Control Keys


            /* Begin Media Control Keys
             case NativeKeyEvent.VC_POWER:
             case NativeKeyEvent.VC_SLEEP:
             case NativeKeyEvent.VC_WAKE:
             case NativeKeyEvent.VC_MEDIA_PLAY:
             case NativeKeyEvent.VC_MEDIA_STOP:
             case NativeKeyEvent.VC_MEDIA_PREVIOUS:
             case NativeKeyEvent.VC_MEDIA_NEXT:
             case NativeKeyEvent.VC_MEDIA_SELECT:
             case NativeKeyEvent.VC_MEDIA_EJECT:
             case NativeKeyEvent.VC_VOLUME_MUTE:
             case NativeKeyEvent.VC_VOLUME_UP:
             case NativeKeyEvent.VC_VOLUME_DOWN:
             case NativeKeyEvent.VC_APP_MAIL:
             case NativeKeyEvent.VC_APP_CALCULATOR:
             case NativeKeyEvent.VC_APP_MUSIC:
             case NativeKeyEvent.VC_APP_PICTURES:
             case NativeKeyEvent.VC_BROWSER_SEARCH:
             case NativeKeyEvent.VC_BROWSER_HOME:
             case NativeKeyEvent.VC_BROWSER_BACK:
             case NativeKeyEvent.VC_BROWSER_FORWARD:
             case NativeKeyEvent.VC_BROWSER_STOP:
             case NativeKeyEvent.VC_BROWSER_REFRESH:
             case NativeKeyEvent.VC_BROWSER_FAVORITES:
             // End Media Control Keys */
            // Begin Japanese Language Keys
            case NativeKeyEvent.VC_KATAKANA:
                keyCode = KeyEvent.VK_KATAKANA;
                break;
            case NativeKeyEvent.VC_UNDERSCORE:
                keyCode = KeyEvent.VK_UNDERSCORE;
                break;
            //case NativeKeyEvent.VC_FURIGANA:
            case NativeKeyEvent.VC_KANJI:
                keyCode = KeyEvent.VK_KANJI;
                break;
            case NativeKeyEvent.VC_HIRAGANA:
                keyCode = KeyEvent.VK_HIRAGANA;
                break;
            //case NativeKeyEvent.VC_YEN:
            // End Japanese Language Keys

            // Begin Sun keyboards
            case NativeKeyEvent.VC_SUN_HELP:
                keyCode = KeyEvent.VK_HELP;
                break;
            case NativeKeyEvent.VC_SUN_STOP:
                keyCode = KeyEvent.VK_STOP;
                break;
            //case NativeKeyEvent.VC_SUN_FRONT:
            //case NativeKeyEvent.VC_SUN_OPEN:
            case NativeKeyEvent.VC_SUN_PROPS:
                keyCode = KeyEvent.VK_PROPS;
                break;
            case NativeKeyEvent.VC_SUN_FIND:
                keyCode = KeyEvent.VK_FIND;
                break;
            case NativeKeyEvent.VC_SUN_AGAIN:
                keyCode = KeyEvent.VK_AGAIN;
                break;
            case NativeKeyEvent.VC_SUN_COPY:
                //case NativeKeyEvent.VC_SUN_INSERT:
                keyCode = KeyEvent.VK_COPY;
                break;
            case NativeKeyEvent.VC_SUN_CUT:
                keyCode = KeyEvent.VK_CUT;
                break;
            // End Sun keyboards
        }

        int modifiers = 0x00;
        if ((e.getModifiers() & NativeInputEvent.SHIFT_MASK) != 0) {
            modifiers |= InputEvent.SHIFT_MASK;
        }
        if ((e.getModifiers() & NativeInputEvent.CTRL_MASK) != 0) {
            modifiers |= InputEvent.CTRL_MASK;
        }
        if ((e.getModifiers() & NativeInputEvent.META_MASK) != 0) {
            modifiers |= InputEvent.META_MASK;
        }
        if ((e.getModifiers() & NativeInputEvent.ALT_MASK) != 0) {
            modifiers |= InputEvent.ALT_MASK;
        }
        if ((e.getModifiers() & NativeInputEvent.BUTTON1_MASK) != 0) {
            modifiers |= InputEvent.BUTTON1_MASK;
        }
        if ((e.getModifiers() & NativeInputEvent.BUTTON2_MASK) != 0) {
            modifiers |= InputEvent.BUTTON2_MASK;
        }
        if ((e.getModifiers() & NativeInputEvent.BUTTON3_MASK) != 0) {
            modifiers |= InputEvent.BUTTON3_MASK;
        }

        int keyLocation = KeyEvent.KEY_LOCATION_UNKNOWN;
        switch (e.getKeyLocation()) {
            case NativeKeyEvent.KEY_LOCATION_LEFT:
                keyLocation = KeyEvent.KEY_LOCATION_LEFT;
                break;

            case NativeKeyEvent.KEY_LOCATION_RIGHT:
                keyLocation = KeyEvent.KEY_LOCATION_RIGHT;
                break;

            case NativeKeyEvent.KEY_LOCATION_NUMPAD:
                keyLocation = KeyEvent.KEY_LOCATION_NUMPAD;
                break;

            case NativeKeyEvent.KEY_LOCATION_STANDARD:
                keyLocation = KeyEvent.KEY_LOCATION_STANDARD;
                break;
        }

        return new KeyEvent(this, e.getID() - (NativeKeyEvent.NATIVE_KEY_FIRST - KeyEvent.KEY_FIRST), System.currentTimeMillis(), modifiers, keyCode, e.getKeyChar(), keyLocation);
    }

    @Override
    public void nativeMouseClicked(NativeMouseEvent nme) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void nativeMousePressed(NativeMouseEvent nme) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void nativeMouseReleased(NativeMouseEvent nme) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void nativeMouseMoved(NativeMouseEvent nme) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void nativeMouseDragged(NativeMouseEvent nme) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
